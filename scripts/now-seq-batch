#!/usr/bin/perl -w

use strict;
use POSIX qw(strftime);
use FindBin;
use lib $FindBin::Bin;
use wGetOptions qw(wpod2usage wGetOptions);
use hyunlib qw(makeMake forkExecWait);

my $dir = "";
my $extSelfSM = "genoCheck.selfSM";
my $extQplotStats = "qplot.stats";
my $extQplotR = "qplot.R";
my $out = "";
my $numjobs = 100;
my $keeptmp = "";
my $samtools = "samtools";

wGetOptions(
    "-Scan the gotCloud QC outputs, and merge summarized statistics",
    "--Required Options",
    "dir=s" => [\$dir, "Directory to scan"],
    "out=s" => [\$out, "Output directory"],
    "--Additional Options",
    "extSelfSM=s" => [\$extSelfSM, "Suffix (or file extension) for verifyBamID's .selfSM file per sample"],
    "extQplotStats=s" => [\$extQplotStats, "Suffix (or file extension) for QPLOT's .stats file per sample"],
    "extQplotR=s" => [\$extQplotR, "Suffix (or file extension) for QPLOT's .R file per sample"],
    "numjobs=i" => [\$numjobs,"Number of jobs to run in parallel"],
    "keep-tmp" => [\$keeptmp,"Keep temporary files"],
    "samtools=s"     => [\$samtools,    "Path to samtools binary"],    
    ) || wpod2usage(2);

unless ( ( $dir ) && ( $out ) ) {
    print STDERR "ERROR: Missing required option\n";
    wpod2usage(2);
}

$dir =~ s/\/$//g;       ## remove trailing slashes

print STDERR "Scanning $dir...\n";

my @qcdirs = ();

my @args = ();

open(IN,"find $dir -name '*.$extQplotR' |") || die "Cannot open file\n";
while(<IN>) {
    chomp;
    my $fqplotR = $_;
    my $fqplotStats = $_;
    my $fselfSM = $_;
    $fqplotStats =~ s/\Q$extQplotR\E$/$extQplotStats/;
    $fselfSM =~ s/\Q$extQplotR\E$/$extSelfSM/;

    #die "$fqplotR $fqplotStats $fselfSM";

    if ( ( -s $fqplotR ) && ( -s $fqplotStats ) && ( -s $fselfSM ) ) {
	if ( $fqplotR =~ /^\Q$dir\E\/(\S+)\/([^\/]+)\.\Q$extQplotR\E$/ ) {
	    my $id = $2;
	    my $group = $1; #"";
	    # if ( $fqplotR =~ /illumina\.barnes\.01/ ) {
	    # 	$group = "Illumina_Barnes_Asthma";
	    # }
	    # elsif ( $fqplotR =~ /illumina/ ) {
	    # 	$group = "Illumina_Blangero_SAFHS";		
	    # }
	    # elsif ( $fqplotR =~ /nygc\/nhlbi-umich-20150609/ ) {
	    # 	$group = "NYGC_Burchard_Asthm";
	    # }
	    # elsif ( $fqplotR =~ /weiss/ ) {
	    # 	$group = "UW_Weiss_Asthma";
	    # }
	    # elsif ( $fqplotR =~ /silverman/ ) {
	    # 	$group = "UW_Silverman_COPD";
	    # }
	    # if ( $group ) {
	    # 	push(@files,[$id,$group,$fqplotR,$fqplotStats,$fselfSM]);
	    # }
	    # else {
	    # 	print STDERR "Skipping $id in $fqplotR..\n";
	    # }
	    push(@args,[$id,$group,$fqplotR,$fqplotStats,$fselfSM]);	    
	}
	else {
	    die "Cannot find ID from $fqplotR";
	}
    }
}
close IN;

print STDERR "Finished identifying ".($#args+1)." samples with QC..\n";

die "No QC results are observed\n" if ( $#args < 0 );

my @cmds = ();
my @files = ();
for(my $i=0; $i < @args; ++$i) {
    my ($id,$group,$qr, $qs, $sm) = @{$args[$i]};
    push(@cmds,"$FindBin::Bin/now-seq-each --id $id --group $group --qplotR $qr --qplotStats $qs --selfSM $sm --out $out.tmp/$id.nowseq");
    push(@files,"$out.tmp/$id.nowseq");
}

&makeMake("$out.tmp","",@cmds);

print STDERR "Running $numjobs parallele jobs... It will take a while to finish..\n";
&forkExecWait("make -f $out.tmp.Makefile -j $numjobs > $out.tmp/log.stdout 2> $out.tmp/log.stderr");

print STDERR "Merging output files\n";
open(OUT,">$out") || die "Cannot open file\n";
for(my $i=0; $i < @files; ++$i) {
    open(IN,$files[$i]) || die "Cannot open $files[$i]\n";
    my $hdr = <IN>;
    print OUT $hdr if ( $i == 0 );
    my $line = <IN>;
    print OUT $line;
    close IN;
}
close OUT;

#print STDERR "Finished writing  QC metrics for ".($#files+1)." samples to $out..\n";

unless ( $keeptmp ) {
    &forkExecWait("rm -rf $out.tmp.Makefile $out.tmp/");
    print STDERR "Finished cleaning up temporary files..\n";
}
